// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
namespace data_package {
class DoublePoint;
class DoublePointDefaultTypeInternal;
extern DoublePointDefaultTypeInternal _DoublePoint_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class IntClipWindow;
class IntClipWindowDefaultTypeInternal;
extern IntClipWindowDefaultTypeInternal _IntClipWindow_default_instance_;
class IntPoint;
class IntPointDefaultTypeInternal;
extern IntPointDefaultTypeInternal _IntPoint_default_instance_;
class IntPointList;
class IntPointListDefaultTypeInternal;
extern IntPointListDefaultTypeInternal _IntPointList_default_instance_;
}  // namespace data_package
PROTOBUF_NAMESPACE_OPEN
template<> ::data_package::DoublePoint* Arena::CreateMaybeMessage<::data_package::DoublePoint>(Arena*);
template<> ::data_package::Image* Arena::CreateMaybeMessage<::data_package::Image>(Arena*);
template<> ::data_package::IntClipWindow* Arena::CreateMaybeMessage<::data_package::IntClipWindow>(Arena*);
template<> ::data_package::IntPoint* Arena::CreateMaybeMessage<::data_package::IntPoint>(Arena*);
template<> ::data_package::IntPointList* Arena::CreateMaybeMessage<::data_package::IntPointList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace data_package {

// ===================================================================

class Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_package.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_package.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 4,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kChannelFieldNumber = 3,
  };
  // bytes buffer = 4;
  void clear_buffer();
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 3;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:data_package.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class IntClipWindow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_package.IntClipWindow) */ {
 public:
  inline IntClipWindow() : IntClipWindow(nullptr) {}
  virtual ~IntClipWindow();

  IntClipWindow(const IntClipWindow& from);
  IntClipWindow(IntClipWindow&& from) noexcept
    : IntClipWindow() {
    *this = ::std::move(from);
  }

  inline IntClipWindow& operator=(const IntClipWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntClipWindow& operator=(IntClipWindow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntClipWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntClipWindow* internal_default_instance() {
    return reinterpret_cast<const IntClipWindow*>(
               &_IntClipWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IntClipWindow& a, IntClipWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(IntClipWindow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntClipWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntClipWindow* New() const final {
    return CreateMaybeMessage<IntClipWindow>(nullptr);
  }

  IntClipWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntClipWindow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntClipWindow& from);
  void MergeFrom(const IntClipWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntClipWindow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_package.IntClipWindow";
  }
  protected:
  explicit IntClipWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonListFieldNumber = 3,
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // repeated .data_package.IntPointList polygon_list = 3;
  int polygon_list_size() const;
  private:
  int _internal_polygon_list_size() const;
  public:
  void clear_polygon_list();
  ::data_package::IntPointList* mutable_polygon_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_package::IntPointList >*
      mutable_polygon_list();
  private:
  const ::data_package::IntPointList& _internal_polygon_list(int index) const;
  ::data_package::IntPointList* _internal_add_polygon_list();
  public:
  const ::data_package::IntPointList& polygon_list(int index) const;
  ::data_package::IntPointList* add_polygon_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_package::IntPointList >&
      polygon_list() const;

  // .data_package.IntPoint min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  const ::data_package::IntPoint& min() const;
  ::data_package::IntPoint* release_min();
  ::data_package::IntPoint* mutable_min();
  void set_allocated_min(::data_package::IntPoint* min);
  private:
  const ::data_package::IntPoint& _internal_min() const;
  ::data_package::IntPoint* _internal_mutable_min();
  public:
  void unsafe_arena_set_allocated_min(
      ::data_package::IntPoint* min);
  ::data_package::IntPoint* unsafe_arena_release_min();

  // .data_package.IntPoint max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const ::data_package::IntPoint& max() const;
  ::data_package::IntPoint* release_max();
  ::data_package::IntPoint* mutable_max();
  void set_allocated_max(::data_package::IntPoint* max);
  private:
  const ::data_package::IntPoint& _internal_max() const;
  ::data_package::IntPoint* _internal_mutable_max();
  public:
  void unsafe_arena_set_allocated_max(
      ::data_package::IntPoint* max);
  ::data_package::IntPoint* unsafe_arena_release_max();

  // @@protoc_insertion_point(class_scope:data_package.IntClipWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_package::IntPointList > polygon_list_;
  ::data_package::IntPoint* min_;
  ::data_package::IntPoint* max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class IntPointList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_package.IntPointList) */ {
 public:
  inline IntPointList() : IntPointList(nullptr) {}
  virtual ~IntPointList();

  IntPointList(const IntPointList& from);
  IntPointList(IntPointList&& from) noexcept
    : IntPointList() {
    *this = ::std::move(from);
  }

  inline IntPointList& operator=(const IntPointList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntPointList& operator=(IntPointList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntPointList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntPointList* internal_default_instance() {
    return reinterpret_cast<const IntPointList*>(
               &_IntPointList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IntPointList& a, IntPointList& b) {
    a.Swap(&b);
  }
  inline void Swap(IntPointList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntPointList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntPointList* New() const final {
    return CreateMaybeMessage<IntPointList>(nullptr);
  }

  IntPointList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntPointList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntPointList& from);
  void MergeFrom(const IntPointList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntPointList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_package.IntPointList";
  }
  protected:
  explicit IntPointList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointListFieldNumber = 1,
  };
  // repeated .data_package.IntPoint point_list = 1;
  int point_list_size() const;
  private:
  int _internal_point_list_size() const;
  public:
  void clear_point_list();
  ::data_package::IntPoint* mutable_point_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_package::IntPoint >*
      mutable_point_list();
  private:
  const ::data_package::IntPoint& _internal_point_list(int index) const;
  ::data_package::IntPoint* _internal_add_point_list();
  public:
  const ::data_package::IntPoint& point_list(int index) const;
  ::data_package::IntPoint* add_point_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_package::IntPoint >&
      point_list() const;

  // @@protoc_insertion_point(class_scope:data_package.IntPointList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_package::IntPoint > point_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class IntPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_package.IntPoint) */ {
 public:
  inline IntPoint() : IntPoint(nullptr) {}
  virtual ~IntPoint();

  IntPoint(const IntPoint& from);
  IntPoint(IntPoint&& from) noexcept
    : IntPoint() {
    *this = ::std::move(from);
  }

  inline IntPoint& operator=(const IntPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntPoint& operator=(IntPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntPoint* internal_default_instance() {
    return reinterpret_cast<const IntPoint*>(
               &_IntPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IntPoint& a, IntPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(IntPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntPoint* New() const final {
    return CreateMaybeMessage<IntPoint>(nullptr);
  }

  IntPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntPoint& from);
  void MergeFrom(const IntPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_package.IntPoint";
  }
  protected:
  explicit IntPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:data_package.IntPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class DoublePoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_package.DoublePoint) */ {
 public:
  inline DoublePoint() : DoublePoint(nullptr) {}
  virtual ~DoublePoint();

  DoublePoint(const DoublePoint& from);
  DoublePoint(DoublePoint&& from) noexcept
    : DoublePoint() {
    *this = ::std::move(from);
  }

  inline DoublePoint& operator=(const DoublePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoublePoint& operator=(DoublePoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoublePoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoublePoint* internal_default_instance() {
    return reinterpret_cast<const DoublePoint*>(
               &_DoublePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DoublePoint& a, DoublePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DoublePoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoublePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoublePoint* New() const final {
    return CreateMaybeMessage<DoublePoint>(nullptr);
  }

  DoublePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoublePoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoublePoint& from);
  void MergeFrom(const DoublePoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoublePoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_package.DoublePoint";
  }
  protected:
  explicit DoublePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:data_package.DoublePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// int32 width = 1;
inline void Image::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:data_package.Image.width)
  return _internal_width();
}
inline void Image::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:data_package.Image.width)
}

// int32 height = 2;
inline void Image::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:data_package.Image.height)
  return _internal_height();
}
inline void Image::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:data_package.Image.height)
}

// int32 channel = 3;
inline void Image::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::channel() const {
  // @@protoc_insertion_point(field_get:data_package.Image.channel)
  return _internal_channel();
}
inline void Image::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void Image::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:data_package.Image.channel)
}

// bytes buffer = 4;
inline void Image::clear_buffer() {
  buffer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Image::buffer() const {
  // @@protoc_insertion_point(field_get:data_package.Image.buffer)
  return _internal_buffer();
}
inline void Image::set_buffer(const std::string& value) {
  _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:data_package.Image.buffer)
}
inline std::string* Image::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable:data_package.Image.buffer)
  return _internal_mutable_buffer();
}
inline const std::string& Image::_internal_buffer() const {
  return buffer_.Get();
}
inline void Image::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Image::set_buffer(std::string&& value) {
  
  buffer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:data_package.Image.buffer)
}
inline void Image::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:data_package.Image.buffer)
}
inline void Image::set_buffer(const void* value,
    size_t size) {
  
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:data_package.Image.buffer)
}
inline std::string* Image::_internal_mutable_buffer() {
  
  return buffer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Image::release_buffer() {
  // @@protoc_insertion_point(field_release:data_package.Image.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:data_package.Image.buffer)
}

// -------------------------------------------------------------------

// IntClipWindow

// .data_package.IntPoint min = 1;
inline bool IntClipWindow::_internal_has_min() const {
  return this != internal_default_instance() && min_ != nullptr;
}
inline bool IntClipWindow::has_min() const {
  return _internal_has_min();
}
inline void IntClipWindow::clear_min() {
  if (GetArena() == nullptr && min_ != nullptr) {
    delete min_;
  }
  min_ = nullptr;
}
inline const ::data_package::IntPoint& IntClipWindow::_internal_min() const {
  const ::data_package::IntPoint* p = min_;
  return p != nullptr ? *p : *reinterpret_cast<const ::data_package::IntPoint*>(
      &::data_package::_IntPoint_default_instance_);
}
inline const ::data_package::IntPoint& IntClipWindow::min() const {
  // @@protoc_insertion_point(field_get:data_package.IntClipWindow.min)
  return _internal_min();
}
inline void IntClipWindow::unsafe_arena_set_allocated_min(
    ::data_package::IntPoint* min) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_);
  }
  min_ = min;
  if (min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_package.IntClipWindow.min)
}
inline ::data_package::IntPoint* IntClipWindow::release_min() {
  
  ::data_package::IntPoint* temp = min_;
  min_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::data_package::IntPoint* IntClipWindow::unsafe_arena_release_min() {
  // @@protoc_insertion_point(field_release:data_package.IntClipWindow.min)
  
  ::data_package::IntPoint* temp = min_;
  min_ = nullptr;
  return temp;
}
inline ::data_package::IntPoint* IntClipWindow::_internal_mutable_min() {
  
  if (min_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_package::IntPoint>(GetArena());
    min_ = p;
  }
  return min_;
}
inline ::data_package::IntPoint* IntClipWindow::mutable_min() {
  // @@protoc_insertion_point(field_mutable:data_package.IntClipWindow.min)
  return _internal_mutable_min();
}
inline void IntClipWindow::set_allocated_min(::data_package::IntPoint* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete min_;
  }
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(min);
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    
  } else {
    
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:data_package.IntClipWindow.min)
}

// .data_package.IntPoint max = 2;
inline bool IntClipWindow::_internal_has_max() const {
  return this != internal_default_instance() && max_ != nullptr;
}
inline bool IntClipWindow::has_max() const {
  return _internal_has_max();
}
inline void IntClipWindow::clear_max() {
  if (GetArena() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
}
inline const ::data_package::IntPoint& IntClipWindow::_internal_max() const {
  const ::data_package::IntPoint* p = max_;
  return p != nullptr ? *p : *reinterpret_cast<const ::data_package::IntPoint*>(
      &::data_package::_IntPoint_default_instance_);
}
inline const ::data_package::IntPoint& IntClipWindow::max() const {
  // @@protoc_insertion_point(field_get:data_package.IntClipWindow.max)
  return _internal_max();
}
inline void IntClipWindow::unsafe_arena_set_allocated_max(
    ::data_package::IntPoint* max) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_);
  }
  max_ = max;
  if (max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_package.IntClipWindow.max)
}
inline ::data_package::IntPoint* IntClipWindow::release_max() {
  
  ::data_package::IntPoint* temp = max_;
  max_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::data_package::IntPoint* IntClipWindow::unsafe_arena_release_max() {
  // @@protoc_insertion_point(field_release:data_package.IntClipWindow.max)
  
  ::data_package::IntPoint* temp = max_;
  max_ = nullptr;
  return temp;
}
inline ::data_package::IntPoint* IntClipWindow::_internal_mutable_max() {
  
  if (max_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_package::IntPoint>(GetArena());
    max_ = p;
  }
  return max_;
}
inline ::data_package::IntPoint* IntClipWindow::mutable_max() {
  // @@protoc_insertion_point(field_mutable:data_package.IntClipWindow.max)
  return _internal_mutable_max();
}
inline void IntClipWindow::set_allocated_max(::data_package::IntPoint* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete max_;
  }
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(max);
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:data_package.IntClipWindow.max)
}

// repeated .data_package.IntPointList polygon_list = 3;
inline int IntClipWindow::_internal_polygon_list_size() const {
  return polygon_list_.size();
}
inline int IntClipWindow::polygon_list_size() const {
  return _internal_polygon_list_size();
}
inline void IntClipWindow::clear_polygon_list() {
  polygon_list_.Clear();
}
inline ::data_package::IntPointList* IntClipWindow::mutable_polygon_list(int index) {
  // @@protoc_insertion_point(field_mutable:data_package.IntClipWindow.polygon_list)
  return polygon_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_package::IntPointList >*
IntClipWindow::mutable_polygon_list() {
  // @@protoc_insertion_point(field_mutable_list:data_package.IntClipWindow.polygon_list)
  return &polygon_list_;
}
inline const ::data_package::IntPointList& IntClipWindow::_internal_polygon_list(int index) const {
  return polygon_list_.Get(index);
}
inline const ::data_package::IntPointList& IntClipWindow::polygon_list(int index) const {
  // @@protoc_insertion_point(field_get:data_package.IntClipWindow.polygon_list)
  return _internal_polygon_list(index);
}
inline ::data_package::IntPointList* IntClipWindow::_internal_add_polygon_list() {
  return polygon_list_.Add();
}
inline ::data_package::IntPointList* IntClipWindow::add_polygon_list() {
  // @@protoc_insertion_point(field_add:data_package.IntClipWindow.polygon_list)
  return _internal_add_polygon_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_package::IntPointList >&
IntClipWindow::polygon_list() const {
  // @@protoc_insertion_point(field_list:data_package.IntClipWindow.polygon_list)
  return polygon_list_;
}

// -------------------------------------------------------------------

// IntPointList

// repeated .data_package.IntPoint point_list = 1;
inline int IntPointList::_internal_point_list_size() const {
  return point_list_.size();
}
inline int IntPointList::point_list_size() const {
  return _internal_point_list_size();
}
inline void IntPointList::clear_point_list() {
  point_list_.Clear();
}
inline ::data_package::IntPoint* IntPointList::mutable_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:data_package.IntPointList.point_list)
  return point_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_package::IntPoint >*
IntPointList::mutable_point_list() {
  // @@protoc_insertion_point(field_mutable_list:data_package.IntPointList.point_list)
  return &point_list_;
}
inline const ::data_package::IntPoint& IntPointList::_internal_point_list(int index) const {
  return point_list_.Get(index);
}
inline const ::data_package::IntPoint& IntPointList::point_list(int index) const {
  // @@protoc_insertion_point(field_get:data_package.IntPointList.point_list)
  return _internal_point_list(index);
}
inline ::data_package::IntPoint* IntPointList::_internal_add_point_list() {
  return point_list_.Add();
}
inline ::data_package::IntPoint* IntPointList::add_point_list() {
  // @@protoc_insertion_point(field_add:data_package.IntPointList.point_list)
  return _internal_add_point_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_package::IntPoint >&
IntPointList::point_list() const {
  // @@protoc_insertion_point(field_list:data_package.IntPointList.point_list)
  return point_list_;
}

// -------------------------------------------------------------------

// IntPoint

// int32 x = 1;
inline void IntPoint::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntPoint::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntPoint::x() const {
  // @@protoc_insertion_point(field_get:data_package.IntPoint.x)
  return _internal_x();
}
inline void IntPoint::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void IntPoint::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:data_package.IntPoint.x)
}

// int32 y = 2;
inline void IntPoint::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntPoint::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntPoint::y() const {
  // @@protoc_insertion_point(field_get:data_package.IntPoint.y)
  return _internal_y();
}
inline void IntPoint::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void IntPoint::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:data_package.IntPoint.y)
}

// -------------------------------------------------------------------

// DoublePoint

// double x = 1;
inline void DoublePoint::clear_x() {
  x_ = 0;
}
inline double DoublePoint::_internal_x() const {
  return x_;
}
inline double DoublePoint::x() const {
  // @@protoc_insertion_point(field_get:data_package.DoublePoint.x)
  return _internal_x();
}
inline void DoublePoint::_internal_set_x(double value) {
  
  x_ = value;
}
inline void DoublePoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:data_package.DoublePoint.x)
}

// double y = 2;
inline void DoublePoint::clear_y() {
  y_ = 0;
}
inline double DoublePoint::_internal_y() const {
  return y_;
}
inline double DoublePoint::y() const {
  // @@protoc_insertion_point(field_get:data_package.DoublePoint.y)
  return _internal_y();
}
inline void DoublePoint::_internal_set_y(double value) {
  
  y_ = value;
}
inline void DoublePoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:data_package.DoublePoint.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_package

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
