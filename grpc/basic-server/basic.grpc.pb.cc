// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: basic.proto

#include "basic.pb.h"
#include "basic.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace basic_package {

static const char* BasicService_method_names[] = {
  "/basic_package.BasicService/BasicUnary",
  "/basic_package.BasicService/BasicServerStreaming",
  "/basic_package.BasicService/BasicClientStreaming",
  "/basic_package.BasicService/BasicBidirectionalStreaming",
};

std::unique_ptr< BasicService::Stub> BasicService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BasicService::Stub> stub(new BasicService::Stub(channel));
  return stub;
}

BasicService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_BasicUnary_(BasicService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BasicServerStreaming_(BasicService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BasicClientStreaming_(BasicService_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_BasicBidirectionalStreaming_(BasicService_method_names[3], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status BasicService::Stub::BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request& request, ::basic_package::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::basic_package::Request, ::basic_package::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BasicUnary_, context, request, response);
}

void BasicService::Stub::experimental_async::BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request* request, ::basic_package::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::basic_package::Request, ::basic_package::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BasicUnary_, context, request, response, std::move(f));
}

void BasicService::Stub::experimental_async::BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request* request, ::basic_package::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BasicUnary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::basic_package::Reply>* BasicService::Stub::PrepareAsyncBasicUnaryRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::basic_package::Reply, ::basic_package::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BasicUnary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::basic_package::Reply>* BasicService::Stub::AsyncBasicUnaryRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBasicUnaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::basic_package::Reply>* BasicService::Stub::BasicServerStreamingRaw(::grpc::ClientContext* context, const ::basic_package::Request& request) {
  return ::grpc::internal::ClientReaderFactory< ::basic_package::Reply>::Create(channel_.get(), rpcmethod_BasicServerStreaming_, context, request);
}

void BasicService::Stub::experimental_async::BasicServerStreaming(::grpc::ClientContext* context, ::basic_package::Request* request, ::grpc::experimental::ClientReadReactor< ::basic_package::Reply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::basic_package::Reply>::Create(stub_->channel_.get(), stub_->rpcmethod_BasicServerStreaming_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::basic_package::Reply>* BasicService::Stub::AsyncBasicServerStreamingRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::basic_package::Reply>::Create(channel_.get(), cq, rpcmethod_BasicServerStreaming_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::basic_package::Reply>* BasicService::Stub::PrepareAsyncBasicServerStreamingRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::basic_package::Reply>::Create(channel_.get(), cq, rpcmethod_BasicServerStreaming_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::basic_package::Request>* BasicService::Stub::BasicClientStreamingRaw(::grpc::ClientContext* context, ::basic_package::Reply* response) {
  return ::grpc::internal::ClientWriterFactory< ::basic_package::Request>::Create(channel_.get(), rpcmethod_BasicClientStreaming_, context, response);
}

void BasicService::Stub::experimental_async::BasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::experimental::ClientWriteReactor< ::basic_package::Request>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::basic_package::Request>::Create(stub_->channel_.get(), stub_->rpcmethod_BasicClientStreaming_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::basic_package::Request>* BasicService::Stub::AsyncBasicClientStreamingRaw(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::basic_package::Request>::Create(channel_.get(), cq, rpcmethod_BasicClientStreaming_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::basic_package::Request>* BasicService::Stub::PrepareAsyncBasicClientStreamingRaw(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::basic_package::Request>::Create(channel_.get(), cq, rpcmethod_BasicClientStreaming_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::basic_package::Request, ::basic_package::Reply>* BasicService::Stub::BasicBidirectionalStreamingRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::basic_package::Request, ::basic_package::Reply>::Create(channel_.get(), rpcmethod_BasicBidirectionalStreaming_, context);
}

void BasicService::Stub::experimental_async::BasicBidirectionalStreaming(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::basic_package::Request,::basic_package::Reply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::basic_package::Request,::basic_package::Reply>::Create(stub_->channel_.get(), stub_->rpcmethod_BasicBidirectionalStreaming_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::basic_package::Request, ::basic_package::Reply>* BasicService::Stub::AsyncBasicBidirectionalStreamingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::basic_package::Request, ::basic_package::Reply>::Create(channel_.get(), cq, rpcmethod_BasicBidirectionalStreaming_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::basic_package::Request, ::basic_package::Reply>* BasicService::Stub::PrepareAsyncBasicBidirectionalStreamingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::basic_package::Request, ::basic_package::Reply>::Create(channel_.get(), cq, rpcmethod_BasicBidirectionalStreaming_, context, false, nullptr);
}

BasicService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BasicService::Service, ::basic_package::Request, ::basic_package::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BasicService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::basic_package::Request* req,
             ::basic_package::Reply* resp) {
               return service->BasicUnary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BasicService::Service, ::basic_package::Request, ::basic_package::Reply>(
          [](BasicService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::basic_package::Request* req,
             ::grpc::ServerWriter<::basic_package::Reply>* writer) {
               return service->BasicServerStreaming(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicService_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< BasicService::Service, ::basic_package::Request, ::basic_package::Reply>(
          [](BasicService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::basic_package::Request>* reader,
             ::basic_package::Reply* resp) {
               return service->BasicClientStreaming(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< BasicService::Service, ::basic_package::Request, ::basic_package::Reply>(
          [](BasicService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::basic_package::Reply,
             ::basic_package::Request>* stream) {
               return service->BasicBidirectionalStreaming(ctx, stream);
             }, this)));
}

BasicService::Service::~Service() {
}

::grpc::Status BasicService::Service::BasicUnary(::grpc::ServerContext* context, const ::basic_package::Request* request, ::basic_package::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BasicService::Service::BasicServerStreaming(::grpc::ServerContext* context, const ::basic_package::Request* request, ::grpc::ServerWriter< ::basic_package::Reply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BasicService::Service::BasicClientStreaming(::grpc::ServerContext* context, ::grpc::ServerReader< ::basic_package::Request>* reader, ::basic_package::Reply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BasicService::Service::BasicBidirectionalStreaming(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::basic_package::Reply, ::basic_package::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace basic_package

