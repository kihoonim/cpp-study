// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: basic.proto
#ifndef GRPC_basic_2eproto__INCLUDED
#define GRPC_basic_2eproto__INCLUDED

#include "basic.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace basic_package {

class BasicService final {
 public:
  static constexpr char const* service_full_name() {
    return "basic_package.BasicService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request& request, ::basic_package::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basic_package::Reply>> AsyncBasicUnary(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basic_package::Reply>>(AsyncBasicUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basic_package::Reply>> PrepareAsyncBasicUnary(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basic_package::Reply>>(PrepareAsyncBasicUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::basic_package::Reply>> BasicServerStreaming(::grpc::ClientContext* context, const ::basic_package::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::basic_package::Reply>>(BasicServerStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::basic_package::Reply>> AsyncBasicServerStreaming(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::basic_package::Reply>>(AsyncBasicServerStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::basic_package::Reply>> PrepareAsyncBasicServerStreaming(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::basic_package::Reply>>(PrepareAsyncBasicServerStreamingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::basic_package::Request>> BasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::basic_package::Request>>(BasicClientStreamingRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::basic_package::Request>> AsyncBasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::basic_package::Request>>(AsyncBasicClientStreamingRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::basic_package::Request>> PrepareAsyncBasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::basic_package::Request>>(PrepareAsyncBasicClientStreamingRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::basic_package::Request, ::basic_package::Reply>> BasicBidirectionalStreaming(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::basic_package::Request, ::basic_package::Reply>>(BasicBidirectionalStreamingRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::basic_package::Request, ::basic_package::Reply>> AsyncBasicBidirectionalStreaming(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::basic_package::Request, ::basic_package::Reply>>(AsyncBasicBidirectionalStreamingRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::basic_package::Request, ::basic_package::Reply>> PrepareAsyncBasicBidirectionalStreaming(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::basic_package::Request, ::basic_package::Reply>>(PrepareAsyncBasicBidirectionalStreamingRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request* request, ::basic_package::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request* request, ::basic_package::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request* request, ::basic_package::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BasicServerStreaming(::grpc::ClientContext* context, ::basic_package::Request* request, ::grpc::ClientReadReactor< ::basic_package::Reply>* reactor) = 0;
      #else
      virtual void BasicServerStreaming(::grpc::ClientContext* context, ::basic_package::Request* request, ::grpc::experimental::ClientReadReactor< ::basic_package::Reply>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::ClientWriteReactor< ::basic_package::Request>* reactor) = 0;
      #else
      virtual void BasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::experimental::ClientWriteReactor< ::basic_package::Request>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BasicBidirectionalStreaming(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::basic_package::Request,::basic_package::Reply>* reactor) = 0;
      #else
      virtual void BasicBidirectionalStreaming(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::basic_package::Request,::basic_package::Reply>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::basic_package::Reply>* AsyncBasicUnaryRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::basic_package::Reply>* PrepareAsyncBasicUnaryRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::basic_package::Reply>* BasicServerStreamingRaw(::grpc::ClientContext* context, const ::basic_package::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::basic_package::Reply>* AsyncBasicServerStreamingRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::basic_package::Reply>* PrepareAsyncBasicServerStreamingRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::basic_package::Request>* BasicClientStreamingRaw(::grpc::ClientContext* context, ::basic_package::Reply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::basic_package::Request>* AsyncBasicClientStreamingRaw(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::basic_package::Request>* PrepareAsyncBasicClientStreamingRaw(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::basic_package::Request, ::basic_package::Reply>* BasicBidirectionalStreamingRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::basic_package::Request, ::basic_package::Reply>* AsyncBasicBidirectionalStreamingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::basic_package::Request, ::basic_package::Reply>* PrepareAsyncBasicBidirectionalStreamingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request& request, ::basic_package::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basic_package::Reply>> AsyncBasicUnary(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basic_package::Reply>>(AsyncBasicUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basic_package::Reply>> PrepareAsyncBasicUnary(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basic_package::Reply>>(PrepareAsyncBasicUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::basic_package::Reply>> BasicServerStreaming(::grpc::ClientContext* context, const ::basic_package::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::basic_package::Reply>>(BasicServerStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::basic_package::Reply>> AsyncBasicServerStreaming(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::basic_package::Reply>>(AsyncBasicServerStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::basic_package::Reply>> PrepareAsyncBasicServerStreaming(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::basic_package::Reply>>(PrepareAsyncBasicServerStreamingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::basic_package::Request>> BasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::basic_package::Request>>(BasicClientStreamingRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::basic_package::Request>> AsyncBasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::basic_package::Request>>(AsyncBasicClientStreamingRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::basic_package::Request>> PrepareAsyncBasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::basic_package::Request>>(PrepareAsyncBasicClientStreamingRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::basic_package::Request, ::basic_package::Reply>> BasicBidirectionalStreaming(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::basic_package::Request, ::basic_package::Reply>>(BasicBidirectionalStreamingRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::basic_package::Request, ::basic_package::Reply>> AsyncBasicBidirectionalStreaming(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::basic_package::Request, ::basic_package::Reply>>(AsyncBasicBidirectionalStreamingRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::basic_package::Request, ::basic_package::Reply>> PrepareAsyncBasicBidirectionalStreaming(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::basic_package::Request, ::basic_package::Reply>>(PrepareAsyncBasicBidirectionalStreamingRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request* request, ::basic_package::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request* request, ::basic_package::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void BasicUnary(::grpc::ClientContext* context, const ::basic_package::Request* request, ::basic_package::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BasicServerStreaming(::grpc::ClientContext* context, ::basic_package::Request* request, ::grpc::ClientReadReactor< ::basic_package::Reply>* reactor) override;
      #else
      void BasicServerStreaming(::grpc::ClientContext* context, ::basic_package::Request* request, ::grpc::experimental::ClientReadReactor< ::basic_package::Reply>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::ClientWriteReactor< ::basic_package::Request>* reactor) override;
      #else
      void BasicClientStreaming(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::experimental::ClientWriteReactor< ::basic_package::Request>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BasicBidirectionalStreaming(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::basic_package::Request,::basic_package::Reply>* reactor) override;
      #else
      void BasicBidirectionalStreaming(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::basic_package::Request,::basic_package::Reply>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::basic_package::Reply>* AsyncBasicUnaryRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::basic_package::Reply>* PrepareAsyncBasicUnaryRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::basic_package::Reply>* BasicServerStreamingRaw(::grpc::ClientContext* context, const ::basic_package::Request& request) override;
    ::grpc::ClientAsyncReader< ::basic_package::Reply>* AsyncBasicServerStreamingRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::basic_package::Reply>* PrepareAsyncBasicServerStreamingRaw(::grpc::ClientContext* context, const ::basic_package::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::basic_package::Request>* BasicClientStreamingRaw(::grpc::ClientContext* context, ::basic_package::Reply* response) override;
    ::grpc::ClientAsyncWriter< ::basic_package::Request>* AsyncBasicClientStreamingRaw(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::basic_package::Request>* PrepareAsyncBasicClientStreamingRaw(::grpc::ClientContext* context, ::basic_package::Reply* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::basic_package::Request, ::basic_package::Reply>* BasicBidirectionalStreamingRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::basic_package::Request, ::basic_package::Reply>* AsyncBasicBidirectionalStreamingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::basic_package::Request, ::basic_package::Reply>* PrepareAsyncBasicBidirectionalStreamingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_BasicUnary_;
    const ::grpc::internal::RpcMethod rpcmethod_BasicServerStreaming_;
    const ::grpc::internal::RpcMethod rpcmethod_BasicClientStreaming_;
    const ::grpc::internal::RpcMethod rpcmethod_BasicBidirectionalStreaming_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status BasicUnary(::grpc::ServerContext* context, const ::basic_package::Request* request, ::basic_package::Reply* response);
    virtual ::grpc::Status BasicServerStreaming(::grpc::ServerContext* context, const ::basic_package::Request* request, ::grpc::ServerWriter< ::basic_package::Reply>* writer);
    virtual ::grpc::Status BasicClientStreaming(::grpc::ServerContext* context, ::grpc::ServerReader< ::basic_package::Request>* reader, ::basic_package::Reply* response);
    virtual ::grpc::Status BasicBidirectionalStreaming(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::basic_package::Reply, ::basic_package::Request>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_BasicUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BasicUnary() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_BasicUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicUnary(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBasicUnary(::grpc::ServerContext* context, ::basic_package::Request* request, ::grpc::ServerAsyncResponseWriter< ::basic_package::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BasicServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BasicServerStreaming() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_BasicServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicServerStreaming(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::grpc::ServerWriter< ::basic_package::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBasicServerStreaming(::grpc::ServerContext* context, ::basic_package::Request* request, ::grpc::ServerAsyncWriter< ::basic_package::Reply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BasicClientStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BasicClientStreaming() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BasicClientStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicClientStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::basic_package::Request>* /*reader*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBasicClientStreaming(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::basic_package::Reply, ::basic_package::Request>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BasicBidirectionalStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BasicBidirectionalStreaming() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BasicBidirectionalStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicBidirectionalStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::basic_package::Reply, ::basic_package::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBasicBidirectionalStreaming(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::basic_package::Reply, ::basic_package::Request>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_BasicUnary<WithAsyncMethod_BasicServerStreaming<WithAsyncMethod_BasicClientStreaming<WithAsyncMethod_BasicBidirectionalStreaming<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BasicUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BasicUnary() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::basic_package::Request, ::basic_package::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::basic_package::Request* request, ::basic_package::Reply* response) { return this->BasicUnary(context, request, response); }));}
    void SetMessageAllocatorFor_BasicUnary(
        ::grpc::experimental::MessageAllocator< ::basic_package::Request, ::basic_package::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::basic_package::Request, ::basic_package::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BasicUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicUnary(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* BasicUnary(
      ::grpc::CallbackServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::basic_package::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* BasicUnary(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::basic_package::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BasicServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BasicServerStreaming() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::basic_package::Request, ::basic_package::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::basic_package::Request* request) { return this->BasicServerStreaming(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_BasicServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicServerStreaming(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::grpc::ServerWriter< ::basic_package::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::basic_package::Reply>* BasicServerStreaming(
      ::grpc::CallbackServerContext* /*context*/, const ::basic_package::Request* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::basic_package::Reply>* BasicServerStreaming(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::basic_package::Request* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BasicClientStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BasicClientStreaming() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::basic_package::Request, ::basic_package::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::basic_package::Reply* response) { return this->BasicClientStreaming(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_BasicClientStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicClientStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::basic_package::Request>* /*reader*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::basic_package::Request>* BasicClientStreaming(
      ::grpc::CallbackServerContext* /*context*/, ::basic_package::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::basic_package::Request>* BasicClientStreaming(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::basic_package::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BasicBidirectionalStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BasicBidirectionalStreaming() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::basic_package::Request, ::basic_package::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->BasicBidirectionalStreaming(context); }));
    }
    ~ExperimentalWithCallbackMethod_BasicBidirectionalStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicBidirectionalStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::basic_package::Reply, ::basic_package::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::basic_package::Request, ::basic_package::Reply>* BasicBidirectionalStreaming(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::basic_package::Request, ::basic_package::Reply>* BasicBidirectionalStreaming(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_BasicUnary<ExperimentalWithCallbackMethod_BasicServerStreaming<ExperimentalWithCallbackMethod_BasicClientStreaming<ExperimentalWithCallbackMethod_BasicBidirectionalStreaming<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_BasicUnary<ExperimentalWithCallbackMethod_BasicServerStreaming<ExperimentalWithCallbackMethod_BasicClientStreaming<ExperimentalWithCallbackMethod_BasicBidirectionalStreaming<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_BasicUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BasicUnary() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_BasicUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicUnary(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BasicServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BasicServerStreaming() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_BasicServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicServerStreaming(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::grpc::ServerWriter< ::basic_package::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BasicClientStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BasicClientStreaming() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BasicClientStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicClientStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::basic_package::Request>* /*reader*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BasicBidirectionalStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BasicBidirectionalStreaming() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BasicBidirectionalStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicBidirectionalStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::basic_package::Reply, ::basic_package::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_BasicUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BasicUnary() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_BasicUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicUnary(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBasicUnary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BasicServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BasicServerStreaming() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_BasicServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicServerStreaming(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::grpc::ServerWriter< ::basic_package::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBasicServerStreaming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BasicClientStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BasicClientStreaming() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BasicClientStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicClientStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::basic_package::Request>* /*reader*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBasicClientStreaming(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BasicBidirectionalStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BasicBidirectionalStreaming() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BasicBidirectionalStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicBidirectionalStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::basic_package::Reply, ::basic_package::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBasicBidirectionalStreaming(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BasicUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BasicUnary() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BasicUnary(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_BasicUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicUnary(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* BasicUnary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* BasicUnary(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BasicServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BasicServerStreaming() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->BasicServerStreaming(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_BasicServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicServerStreaming(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::grpc::ServerWriter< ::basic_package::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* BasicServerStreaming(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* BasicServerStreaming(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BasicClientStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BasicClientStreaming() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->BasicClientStreaming(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_BasicClientStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicClientStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::basic_package::Request>* /*reader*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* BasicClientStreaming(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* BasicClientStreaming(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BasicBidirectionalStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BasicBidirectionalStreaming() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->BasicBidirectionalStreaming(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_BasicBidirectionalStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BasicBidirectionalStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::basic_package::Reply, ::basic_package::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BasicBidirectionalStreaming(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BasicBidirectionalStreaming(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BasicUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BasicUnary() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::basic_package::Request, ::basic_package::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::basic_package::Request, ::basic_package::Reply>* streamer) {
                       return this->StreamedBasicUnary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BasicUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BasicUnary(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::basic_package::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBasicUnary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::basic_package::Request,::basic_package::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_BasicUnary<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_BasicServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_BasicServerStreaming() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::basic_package::Request, ::basic_package::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::basic_package::Request, ::basic_package::Reply>* streamer) {
                       return this->StreamedBasicServerStreaming(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_BasicServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BasicServerStreaming(::grpc::ServerContext* /*context*/, const ::basic_package::Request* /*request*/, ::grpc::ServerWriter< ::basic_package::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedBasicServerStreaming(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::basic_package::Request,::basic_package::Reply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_BasicServerStreaming<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_BasicUnary<WithSplitStreamingMethod_BasicServerStreaming<Service > > StreamedService;
};

}  // namespace basic_package


#endif  // GRPC_basic_2eproto__INCLUDED
